{"version":3,"sources":["components/PostsCounter.js","components/UniqueTitles.js","components/ClosestUser.js","components/api/GetDataFromAPI.js","components/MainField.js","App.js","serviceWorker.js","index.js"],"names":["PostsCounter","props","posts","users","howMany","forEach","user","postsCounter","post","id","userId","push","name","map","index","key","UniqueTitles","alreadyNotUnique","notUnique","i","length","j","title","ClosestUser","resultsArray","degreesToRadians","degrees","Math","PI","firstUser","withWhoSmallestDistance","smallestDistance","firstLatitude","address","geo","lat","secondUser","secondLatitude","longitudeDelta","lng","distance","acos","sin","cos","result","getDataFromAPI","dataType","fetch","then","resp","ok","json","Error","MainField","state","setState","catch","err","console","log","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.06d26e36.chunk.js","sourcesContent":["import React from 'react';\n\n//funkcja licząca ile postów napisali userzy\nfunction PostsCounter(props) {\n\n        const {posts, users} = props;\n        if(!posts || !users) {\n            return null;\n        }\n        else {\n            const howMany = [];\n            users.forEach(user => {\n                let postsCounter = 0;\n                posts.forEach(post => {\n                    if (user.id === post.userId)\n                        postsCounter++;\n                });\n                howMany.push(`${user.name} napisał(a) ${postsCounter} postów`);\n            });\n            return (\n                <ul>{howMany.map((post, index) => <li key={index}>{post}</li>)}</ul>\n            );\n        }\n}\n\nexport default PostsCounter;","import React from 'react';\n\n//funkcja sprawdzająca czy tytuły postów są unikalne, zwracająca listę tych, które nie są\nfunction UniqueTitles(props) {\n\n    const {posts} = props;\n    if (!posts)  {\n        return null;\n    }\n    else {\n        const notUnique = [];\n        let alreadyNotUnique;\n        for (let i = 0; i < posts.length; i++) {\n            alreadyNotUnique = false;\n            for (let j = 0; j < notUnique.length; j++) {\n                if (posts[i].title === notUnique[j]) {\n                    alreadyNotUnique = true;\n                    break;\n                }\n            }\n            if (alreadyNotUnique)\n                continue;\n            else {\n                for (let j = 0; j < posts.length; j++) {\n                    if (i !== j && posts[i].title === posts[j].title) {\n                        notUnique.push(posts[i].title);\n                        break;\n                    }\n                }\n            }\n        }\n        if (notUnique.length > 0) {\n            return (\n                <>\n                    <h2>Posty, których tytuły nie są unikalne: </h2>\n                    <ul>{notUnique.map((title, index) => <li key={index}>{title}</li>)}</ul>\n                </>\n            );\n        } else {\n            return (\n                <h2>Tytuły wszystkich postów są unikalne</h2>\n            )\n        }\n    }\n}\n\nexport default UniqueTitles;","import React from 'react';\n\n//funkcja, która każdemu użytkownikowi przyporządkowuje użytkownika mieszkającego najbliżej\nfunction ClosestUser(props) {\n\n    if(!props.users){\n        return null;\n    }\n    else {\n        const {users} = props;\n        const resultsArray = [];\n        const degreesToRadians = (degrees) => {\n            const PI = Math.PI;\n            return degrees * (PI / 180);\n        };\n        users.forEach(firstUser => {\n            let withWhoSmallestDistance;\n            let smallestDistance;\n            let firstLatitude = degreesToRadians(firstUser.address.geo.lat);\n            users.forEach(secondUser => {\n                if (firstUser !== secondUser) {\n                    let secondLatitude = degreesToRadians(secondUser.address.geo.lat);\n                    let longitudeDelta = degreesToRadians(secondUser.address.geo.lng - firstUser.address.geo.lng);\n                    let angle = Math.acos(Math.sin(firstLatitude) * Math.sin(secondLatitude) + Math.cos(firstLatitude) * Math.cos(secondLatitude) * Math.cos(longitudeDelta));\n                    let distance = 6371 * angle;\n                    if (!smallestDistance || distance < smallestDistance) {\n                        smallestDistance = distance;\n                        withWhoSmallestDistance = secondUser.name;\n                    }\n                }\n            });\n            resultsArray.push(`Najbliżej ${firstUser.name} mieszka ${withWhoSmallestDistance}`);\n        });\n        return (\n            <ul>{resultsArray.map((result, index) => <li key={index}>{result}</li>)}</ul>\n        )\n    }\n}\n\nexport default ClosestUser;","\nconst getDataFromAPI = (dataType) => {\n    return fetch(`https://jsonplaceholder.typicode.com/${dataType}`).then(resp => {\n        if (resp.ok)\n            return resp.json();\n        else\n            throw new Error('Błąd sieci');\n    });\n};\n\nexport default getDataFromAPI;","import React, {Component} from 'react';\nimport PostsCounter from \"./PostsCounter\";\nimport UniqueTitles from \"./UniqueTitles\";\nimport ClosestUser from \"./ClosestUser\";\nimport getDataFromAPI from './api/GetDataFromAPI'\n\nclass MainField extends Component {\n    state = {\n        posts: false,\n        users: false\n    };\n\n    //Przy zamontowaniu komponentu pobierane są dane z API i zapisywane w state\n    componentDidMount() {\n        getDataFromAPI('posts').then(resp => {\n            this.setState({\n                posts: resp\n            });\n        }).catch(err => {\n            console.log('Błąd!', err);\n        });\n\n        getDataFromAPI('users').then(resp => {\n            this.setState({\n                users: resp\n            });\n        }).catch(err => {\n            console.log('Błąd!', err);\n        });\n    };\n\n\n    render() {\n        const {posts, users} = this.state;\n        if (!posts || !users) {\n            return (\n                <h1 id='data-loading'>Ładowanie danych ...</h1>\n            )\n        }\n        else {\n            return (\n                <section>\n                    <PostsCounter posts={posts} users={users}/>\n                    <UniqueTitles posts={posts}/>\n                    <ClosestUser users={users}/>\n                </section>\n            )\n        }\n    }\n}\n\nexport default MainField;","import React from 'react';\nimport './App.css';\nimport MainField from \"./components/MainField\";\n\nfunction App() {\n  return (\n      <MainField/>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}